# -----------------------------------------------------------------------------
# .SYNOPSIS
#   This pipeline is the main pipeline that contains the top level stages for the deployment
# using other YAML templates as references both locally and from the common library
# .DESCRIPTION
#   This pipeline will:
#  1. Add the common-library for shared pipeline references, which include
#     a. YAML references for Image Builder to deploy custom images and / or containers
#     b. YAML references for Terraform Init, Plan, and Apply, which contain references to common bash scripts
# .ASSUMPTIONS:
#     1. Looping is not needed for environment stages due to different parameters per environment
#     2. Terraform steps are the same across all projects (setup, init, plan, apply)
# .NOTES
#     File Name      : Pipeline.yaml
#     Prerequisite   : ADO Multi-Stage Yaml Pipeline
# .VARAIBLE_NAMING_CONVENTION
#   sig = shared image gallery
#   rg = resource group
#   dest = destination
#   sa = storage account
#   SERVICE-CONNECTION
#     This is the name of the azure devops service connection

# -----------------------------------------------------------------------------

name: jumpstart-vm-$(version).$(Rev:rr)


trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    exclude: 
      - /**/*.md
      - /.attachments

#release wide variables
variables:
  - name: version
    value: 0.4

  - template: Variables.yaml
  - name: system.debug 
    value: true

resources:
  repositories:
    - repository: common-library
      type: git
      name: ATT Cloud/common-library
      ref: refs/tags/v0.4.1
      endpoint: Common-Library-Service-Connection

pool: $(agent_pool)

stages:
- stage: Dev
  displayName: Dev
  variables:
    - template: /Pipelines/Variables.dev.yaml
  jobs:
  - job: buildimage
    workspace:
      clean: all
    timeoutInMinutes: 120 
    steps:
    - template: /Pipelines/Build.yaml
      parameters:
        serviceConnection: $(serviceConnectionSIG)

        blob: $(todoapp_blob)
        folder_def: $(todoapp_folder_def)
        packer_def: $(todoapp_packer_def)
        dest_sig_definition: $(todoapp_dest_sig_definition)
        dest_sig_version: $(todoapp_dest_sig_version)
        container_name: $(todoapp_container_name)

        sa_name: $(ci_sa_name)
     
        base_sig: $(base_sig)
        base_sig_rg: $(base_sig_rg)
        base_sig_subid: $(base_sig_subid)
        base_sig_definition: $(base_sig_definition)
        base_sig_version: $(base_sig_version)
        dest_sig_rg: $(dest_sig_rg)
        dest_sig: $(dest_sig)

        virtual_network_resource_group_name: $(vp_base_rg)
        virtual_network_name: $(vp_vnet)
        virtual_network_subnet_name: $(vp_packer_subnet)
        managed_image_resource_group_name: $(vp_packer_rg)
        location: $(LOCATION)
        
  #- template: /Pipelines/Stage.yaml
    #parameters:
      #dependsOn: buildimage
      #environment: dev
      #serviceConnectionApp: ${{ variables.serviceConnectionApp }}
      #serviceConnectionSIG: $(serviceConnectionSIG)
      #tf_variable_name: 'linux_image_id' #variable being used by Terraform as the VM source image id, generated by this pipeline
      #dest_sig_rg: $(dest_sig_rg)
      #dest_sig: $(dest_sig)
      #dest_sig_definition: $(todoapp_dest_sig_definition)
      #dest_sig_version: $(todoapp_dest_sig_version)

#- stage: PROD
  #displayName: PROD
  #variables:
    #- template: /Pipelines/Variables.prod.yaml
  #dependsOn: DEV
  #condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  #jobs:
  #- template: /Pipelines/Stage.yaml
    #parameters:
      #environment: prod
      #serviceConnectionApp: ${{ variables.serviceConnectionApp }}
      #serviceConnectionSIG: $(serviceConnectionSIG)
      #tf_variable_name: 'linux_image_id' 
      #dest_sig_rg: $(dest_sig_rg)
      #dest_sig: $(dest_sig)
      #dest_sig_definition: $(todoapp_dest_sig_definition)
      #dest_sig_version: $(todoapp_dest_sig_version)